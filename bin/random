#!/usr/bin/python
# Brandon Edens
# AS220
# 2010-04-08
# Copyright (C) 2009 Brandon Edens <brandon@as220.org>
#
# This file is part of jukebox.
#
# jukebox is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# jukebox is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with jukebox.  If not, see <http://www.gnu.org/licenses/>.
"""
Jukebox random music loader.
"""

###############################################################################
## Imports
###############################################################################

import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'jukebox.settings'

from django.conf import settings
import logging
import time
import random
import sys
import traceback

from jukebox.music.models import Song, QueuedPlay


###############################################################################
## Functions
###############################################################################

def main():
    while True:
        if QueuedPlay.objects.count() == 0:
            songs = Song.objects.filter(approved=True)
            song = random.choice(songs)
            logging.info("Randomly playing %s." % song)
            new_track = QueuedPlay(song=song, random=True, paid=False)
            new_track.save()
        else:
            if settings.RANDOM_SLEEP_MIN > settings.RANDOM_SLEEP_MAX:
                logging.warning("Random sleep min %d is greater than max %d." % (settings.RANDOM_SLEEP_MIN,
                                                                                 settings.RANDOM_SLEEP_MAX))
            sleep_seconds = random.randint(settings.RANDOM_SLEEP_MIN,
                                           settings.RANDOM_SLEEP_MAX)
            logging.debug("Sleeping for %d seconds." % sleep_seconds)
            time.sleep(sleep_seconds)


###############################################################################
## Statements
###############################################################################

if __name__ == '__main__':
    # Setup logging.
    logging.basicConfig(filename=settings.LOG_RANDOM_FILENAME,
                        level=logging.DEBUG,
                        format=settings.LOG_FORMAT)
    consolehandler = logging.StreamHandler()
    consolehandler.setLevel( logging.DEBUG )
    formatter = logging.Formatter(settings.LOG_FORMAT)
    consolehandler.setFormatter(formatter)
    logging.getLogger( '' ).addHandler( consolehandler )
    logging.info('Starting jukebox random software.')
    try:
        main()
    except KeyboardInterrupt:
        # Keyboard interrupt so its time to shutdown software.
        logging.debug('Keyboard interrupt so shut down software.')
    except Exception as e:
        traceback.print_exc()
        logging.critical("Unexpected failure %s." % e)
        sys.exit(1)
    logging.info('Shutting down jukebox random software.')

