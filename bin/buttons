#!/usr/bin/python

###############################################################################
## Imports
###############################################################################

import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'jukebox.settings'

from django.conf import settings

import logging
import os
import serial
import sys
import time


###############################################################################
## Constants
###############################################################################

# Location of the xdotool command
XDOTOOL = "/usr/bin/xdotool"

# Default serial port to use
DEFAULT_SERIAL = "/dev/ttyUSB0"

# Coin drop debuce seconds
COIN_DROP_DEBOUNCE_SECONDS = 0.2

# Default credits file
CREDITS_FILENAME = '/var/lib/jukebox/credits.txt'

# Mappings of buttons to keyboard commands.
KEYBOARD_MAPPINGS = {'blue': 'Return',
                     'green': 'Right',
                     'purple': 'Up',
                     'red': 'Left',
                     'white': 'BackSpace',
                     'yellow': 'Down',
                     'coin': 'space',
                     }


###############################################################################
## Functions
###############################################################################

def coin_drop():
    """
    Handle a coin drop. This function opens the credits.txt file or creates a
    new one then reads in the current credits value and increments that value
    by one. Finally this function writes the new credit value.
    """
    fh = None
    current_credits = 0
    if os.path.isfile(CREDITS_FILENAME):
        fh = open(CREDITS_FILENAME, 'r+')
        try:
            current_credits = int(fh.readline())
        except ValueError:
            # Error reading the current credits value. Reset the system back to
            # 0.
            current_credits = 0
    else:
        fh = open(CREDITS_FILENAME, 'w')
    current_credits += 1
    fh.seek(0)
    fh.write("%d\n" % current_credits)
    fh.close()
    logging.info("Coin drop registered. Credits now at: %d" % current_credits)

def main():
    """
    The main method. Open the serial port then begin listening for incoming
    serial data which is composed of button presses or coin drops.

    The serial data that is sent from the device attached to the buttons should
    only be sent when a button or the coin system's state changes. Meaning that
    only data is sent when a user presses one of the buttons.

    The device monitoring the buttons should send a string similar to the following:
    Juke1001001
    which would be interpreted as:
      * blue button pressed
      * red button pressed

    Note that the coin drop value goes low or 0 when a coin is inserted AND
    that particular switch is debounced by this function.
    """
    try:
        usb_port = sys.argv[1]
    except:
        usb_port = DEFAULT_SERIAL

    ser = serial.Serial(usb_port, 115200, timeout=1)
    ser.xonxoff = False
    ser.rtscts = False

    last_serial_input = []
    ring = 'XXXXBGPRWYC'

    last_coin_drop_timestamp = time.time()

    try:
        # State of the buttons
        blue_state = 0
        green_state = 0
        purple_state = 0
        red_state = 0
        white_state = 0
        yellow_state = 0

        # State of the coins
        coin_state = 1

        while True:
            c = ser.read(1)
            if len(c) != 1:
                continue
            ring = ring[1:] + c
            if ring[:4] != 'Juke':
                continue
            serial_input = ring[4:]

            try:
                blue = int(serial_input[0])
                green = int(serial_input[1])
                purple = int(serial_input[2])
                red = int(serial_input[3])
                white = int(serial_input[4])
                yellow = int(serial_input[5])
                coin = int(serial_input[6])
            except IndexError:
                continue
            except ValueError:
                continue

            if serial_input != last_serial_input:
                last_serial_input = serial_input

            if blue_state != blue:
                if blue == 1:
                    xdotool_keydown('blue')
                else:
                    xdotool_keyup('blue')

            if green_state != green:
                if green == 1:
                    xdotool_keydown('green')
                else:
                    xdotool_keyup('green')

            if purple_state != purple:
                if purple == 1:
                    xdotool_keydown('purple')
                else:
                    xdotool_keyup('purple')

            if red_state != red:
                if red == 1:
                    xdotool_keydown('red')
                else:
                    xdotool_keyup('red')

            if white_state != white:
                if white == 1:
                    xdotool_keydown('white')
                else:
                    xdotool_keyup('white')

            if yellow_state != yellow:
                if yellow == 1:
                    xdotool_keydown('yellow')
                else:
                    xdotool_keyup('yellow')

            if coin_state != coin:
                if coin == 0:
                    current_timestamp = time.time()
                    # Debounce the coin drop by checking to see if time between
                    # now and the last coin drop timestamp is greater than 200
                    # milliseconds
                    if current_timestamp - last_coin_drop_timestamp > COIN_DROP_DEBOUNCE_SECONDS:
                        coin_drop()
                        last_coin_drop_timestamp = current_timestamp
                        xdotool_keydown('coin')
                        xdotool_keyup('coin')

            blue_state = blue
            green_state = green
            purple_state = purple
            red_state = red
            white_state = white
            yellow_state = yellow

            coin_state = coin

    finally:
        ser.close()

    ser.close()

def xdotool_keydown(button):
    """
    Execute xdotool keydown for the given button
    """
    xdotool('keydown', button)

def xdotool_keyup(button):
    """
    Execute xdotool keyup for the given button.
    """
    xdotool('keyup', button)

def xdotool(keystroke, button):
    """
    Make a system call that executes xdotool with the given keystroke one of:
    keydown or keyup. This function checks KEYBOARD_MAPPINGS to convert the given
    button name which is one of: blue, green, purple, red, white, yellow, or
    coin, to its respective keyboard mapping.
    """
    logging.debug("Button %s in state %s sending keyboard button %s"
                  % (button,
                     keystroke,
                     KEYBOARD_MAPPINGS[button]))
    os.system("%s %s %s" % (XDOTOOL, keystroke, KEYBOARD_MAPPINGS[button]))

if __name__ == '__main__':
    main()

