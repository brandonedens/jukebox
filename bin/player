#!/usr/bin/python
# Brandon Edens
# AS220
# 2010-04-08
# Copyright (C) 2009 Brandon Edens <brandon@as220.org>
#
# This file is part of jukebox.
#
# jukebox is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# jukebox is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with jukebox.  If not, see <http://www.gnu.org/licenses/>.
"""
Jukebox music player script.
"""

###############################################################################
## Imports
###############################################################################

import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'jukebox.settings'

from django.conf import settings
import logging
import shutil
import subprocess
import sys
import tempfile
import time
import traceback

from jukebox.client.models import QueuedPlay, PaidPlay, RandomPlay


###############################################################################
## Constants
###############################################################################

MP3_PLAYER = "/usr/bin/mplayer"
VOLUME_CONTROL = '/usr/bin/amixer'


###############################################################################
## Functions
###############################################################################

def set_playing(song):
    """
    Sets the playing song in the location specified by the settings
    PLAYING_FILENAME.
    """
    tmpfile = tempfile.NamedTemporaryFile()
    tmpfile.write("%d\n" % song.id)
    tmpfile.flush()
    shutil.copy(tmpfile.name, settings.PLAYING_FILENAME)
    tmpfile.close()

def set_volume(level):
    """
    Set the volume level of the player. The volume level should be a percentage
    from 0 to 100.
    """
    if level > 100:
        level = 100
    elif level < 0:
        level = 0
    returncode = subprocess.call([VOLUME_CONTROL,
                                  'set',
                                  'Master',
                                  "%s%%" % level])

def stop_playing():
    """
    Removes the playing song information from the file specified by the
    settings PLAYING_FILENAME.
    """
    shutil.move(settings.PLAYING_FILENAME, settings.LAST_SONG_FILENAME)

def main():
    while True:
        if QueuedPlay.objects.count() > 0:
            # We have music to play.
            tracks = QueuedPlay.objects.all()

            track_to_play = tracks[0]
            set_playing(track_to_play.song)

            if track_to_play.paid:
                logging.info("Now playing paid song %s" % track_to_play.song)
            elif track_to_play.random:
                logging.info("Now playing random song %s" % track_to_play.song)

            # The absolute path to the song filename is the media root + the
            # song's file field.
            song_filename = settings.MEDIA_ROOT+'/'+str(track_to_play.song.file)

            if track_to_play.random:
                set_volume(92)
            else:
                set_volume(98)

            # Call the mp3 player (mplayer) and record the return code for
            # logging purposes.
            returncode = subprocess.call([MP3_PLAYER,
                                          "-vo", "null",
                                          song_filename])
            if returncode != 0:
                logging.warning("Receiving error code %d from mp3 player."
                                % returncode)

            logging.info("Finished playing song %s" % track_to_play.song)


            # Move the file lock for the playing file to the last song played.
            stop_playing()

            # Add information on previously played track.
            if track_to_play.paid:
                play = PaidPlay(song=track_to_play.song)
                # Delete the track from the queue
                track_to_play.delete()
                # Save the paid play
                play.save()
            elif track_to_play.random:
                play = RandomPlay(song=track_to_play.song)
                # Delete the track from the queue
                track_to_play.delete()
                # Save the random play
                play.save()

        else:
            # No music to play, sleep 1 second then try again.
            time.sleep(1)


###############################################################################
## Statements
###############################################################################

if __name__ == '__main__':
    # Setup logging.
    logging.basicConfig(filename=settings.LOG_PLAYER_FILENAME,
                        level=logging.DEBUG,
                        format=settings.LOG_FORMAT)
    consolehandler = logging.StreamHandler()
    consolehandler.setLevel( logging.DEBUG )
    formatter = logging.Formatter(settings.LOG_FORMAT)
    consolehandler.setFormatter(formatter)
    logging.getLogger( '' ).addHandler( consolehandler )
    logging.info('Starting jukebox player software.')
    try:
        main()
    except KeyboardInterrupt:
        # Keyboard interrupt so its time to shutdown software.
        logging.debug('Keyboard interrupt so shut down software.')
    except Exception as e:
        traceback.print_exc()
        logging.critical("Unexpected failure %s." % e)
        sys.exit(1)
    logging.info('Shutting down jukebox player software.')

