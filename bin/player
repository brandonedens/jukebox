#!/usr/bin/python
# Brandon Edens
# AS220
# 2010-04-08
# Copyright (C) 2009 Brandon Edens <brandon@as220.org>
#
# This file is part of jukebox.
#
# jukebox is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# jukebox is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with jukebox.  If not, see <http://www.gnu.org/licenses/>.
"""
Jukebox music player script.
"""

###############################################################################
## Imports
###############################################################################

import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'jukebox.settings'

from django.conf import settings
import logging
import shutil
import subprocess
import tempfile
import time

from jukebox.music.models import QueuedPlay, Play


###############################################################################
## Constants
###############################################################################

MP3_PLAYER = "/usr/bin/mpg321"


###############################################################################
## Functions
###############################################################################

def set_playing(song):
    """
    Sets the playing song in the location specified by the settings
    PLAYING_FILENAME.
    """
    tmpfile = tempfile.NamedTemporaryFile()
    tmpfile.write("%d\n" % song.id)
    tmpfile.flush()
    shutil.copy(tmpfile.name, settings.PLAYING_FILENAME)
    tmpfile.close()

def stop_playing():
    """
    Removes the playing song information from the file specified by the
    settings PLAYING_FILENAME.
    """
    shutil.move(settings.PLAYING_FILENAME, settings.LAST_SONG_FILENAME)

def main():
    while True:
        if QueuedPlay.objects.count() > 0:
            # We have music to play.
            tracks = QueuedPlay.objects.all()

            track_to_play = tracks[0]
            set_playing(track_to_play.song)

            logging.info("Now playing song %s" % track_to_play.song)
            returncode = subprocess.call([MP3_PLAYER,
                                          "-o", "esd",
                                          str(track_to_play.song.file)])
            if returncode != 0:
                logging.warning("Receiving error code %d from mp3 player."
                                % returncode)

            logging.info("Finished playing song %s" % track_to_play.song)


            # Move the file lock for the playing file to the last song played.
            stop_playing()

            # Delete the track from queue
            track_to_play.delete()

            # Add information on previous played track
            play = Play(song=track_to_play.song,
                        paid=track_to_play.paid,
                        random=track_to_play.random)
            play.save()

            # Update song's total number of plays
            song = track_to_play.song
            song.number_of_plays += 1
            song.save()

        else:
            # No music to play, sleep 1 second then try again.
            time.sleep(1)


###############################################################################
## Statements
###############################################################################

if __name__ == '__main__':
    # Setup logging.
    logging.basicConfig(filename=settings.LOG_PLAYER_FILENAME,
                        level=logging.DEBUG,
                        format=settings.LOG_FORMAT)
    consolehandler = logging.StreamHandler()
    consolehandler.setLevel( logging.DEBUG )
    formatter = logging.Formatter(settings.LOG_FORMAT)
    consolehandler.setFormatter(formatter)
    logging.getLogger( '' ).addHandler( consolehandler )
    logging.info('Starting jukebox player software.')
    try:
        main()
    except KeyboardInterrupt:
        # Keyboard interrupt so its time to shutdown software.
        logging.debug('Keyboard interrupt so shut down software.')
    logging.info('Shutting down jukebox player software.')


