#!/usr/bin/env python
# Brandon Edens
# AS220
# 2009-12-24
# Copyright (C) 2009 Brandon Edens <brandon@as220.org>
#
# This file is part of jukebox.
#
# jukebox is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# jukebox is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with jukebox.  If not, see <http://www.gnu.org/licenses/>.
"""
Implementation of executable used to start the jukebox software.
"""

###############################################################################
## Imports
###############################################################################

import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'jukebox.settings'

from django.conf import settings
import clutter
import logging
import signal
import sys

from jukebox.client.main import Jukebox


###############################################################################
## Functions
###############################################################################

def signal_handler(signum, frame):
    """
    Handler for incoming process signals.
    """
    if signum == signal.SIGINT:
        clutter.main_quit()

def main():
    """
    Main function.
    """
    # Setup logging for audio interface.
    logging.basicConfig(filename=settings.LOG_FILENAME,
                        level=logging.DEBUG,
                        format=settings.LOG_FORMAT)
    consolehandler = logging.StreamHandler()
    consolehandler.setLevel( logging.DEBUG )
    formatter = logging.Formatter(settings.LOG_FORMAT)
    consolehandler.setFormatter(formatter)
    logging.getLogger( '' ).addHandler( consolehandler )

    logging.info("Starting Jukebox.")
    jukebox = Jukebox()
    signal.signal(signal.SIGINT, signal_handler)
    stage = clutter.Stage()
    stage.hide_cursor()

    if settings.FULLSCREEN:
        logging.info('Setting GUI to fullscreen.')
        stage.set_fullscreen(True)
    stage.set_color(clutter.Color(0x00, 0x00, 0x00, 0xff))

    # Connect listeners
    stage.connect('destroy', clutter.main_quit)
    stage.connect('key-press-event', jukebox.on_press)
    stage.connect('key-release-event', jukebox.on_release)
    stage.add(jukebox)
    stage.show()
    clutter.main()
    logging.info("Stopping Jukebox.")
    return 0


###############################################################################
## Statements
###############################################################################

if __name__ == '__main__':
    sys.exit(main())


